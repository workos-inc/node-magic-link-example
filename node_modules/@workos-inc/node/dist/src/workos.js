"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkOS = void 0;
const axios_1 = __importDefault(require("axios"));
const audit_trail_1 = require("./audit-trail/audit-trail");
const directory_sync_1 = require("./directory-sync/directory-sync");
const exceptions_1 = require("./common/exceptions");
const passwordless_1 = require("./passwordless/passwordless");
const portal_1 = require("./portal/portal");
const sso_1 = require("./sso/sso");
const package_json_1 = require("../package.json");
const DEFAULT_HOSTNAME = 'api.workos.com';
class WorkOS {
    constructor(key, options = {}) {
        this.key = key;
        this.options = options;
        this.auditTrail = new audit_trail_1.AuditTrail(this);
        this.directorySync = new directory_sync_1.DirectorySync(this);
        this.passwordless = new passwordless_1.Passwordless(this);
        this.portal = new portal_1.Portal(this);
        this.sso = new sso_1.SSO(this);
        if (!key) {
            this.key = process.env.WORKOS_API_KEY;
            if (!this.key) {
                throw new exceptions_1.NoApiKeyProvidedException();
            }
        }
        if (this.options.https === undefined) {
            this.options.https = true;
        }
        const protocol = this.options.https ? 'https' : 'http';
        const apiHostname = this.options.apiHostname || DEFAULT_HOSTNAME;
        const port = this.options.port;
        this.baseURL = `${protocol}://${apiHostname}`;
        if (port) {
            this.baseURL = this.baseURL + `:${port}`;
        }
        this.client = axios_1.default.create({
            baseURL: this.baseURL,
            headers: {
                Authorization: `Bearer ${this.key}`,
                'User-Agent': `workos-node/${package_json_1.version}`,
            },
        });
    }
    post(path, entity, options = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const requestHeaders = {};
            if (options.idempotencyKey) {
                requestHeaders['Idempotency-Key'] = options.idempotencyKey;
            }
            try {
                return yield this.client.post(path, entity, {
                    params: options.query,
                    headers: requestHeaders,
                });
            }
            catch (error) {
                const { response } = error;
                if (response) {
                    const { status, data, headers } = response;
                    const requestID = headers['X-Request-ID'];
                    switch (status) {
                        case 401: {
                            throw new exceptions_1.UnauthorizedException(requestID);
                        }
                        case 422: {
                            const { errors } = data;
                            throw new exceptions_1.UnprocessableEntityException(errors, requestID);
                        }
                        case 404: {
                            throw new exceptions_1.NotFoundException(path, requestID);
                        }
                        default: {
                            throw new exceptions_1.GenericServerException(status, data.message, requestID);
                        }
                    }
                }
                throw error;
            }
        });
    }
    get(path, query) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                return yield this.client.get(path, {
                    params: query,
                });
            }
            catch (error) {
                const { response } = error;
                if (response) {
                    const { status, data, headers } = response;
                    const requestID = headers['X-Request-ID'];
                    switch (status) {
                        case 401: {
                            throw new exceptions_1.UnauthorizedException(requestID);
                        }
                        case 422: {
                            const { errors } = data;
                            throw new exceptions_1.UnprocessableEntityException(errors, requestID);
                        }
                        case 404: {
                            throw new exceptions_1.NotFoundException(path, requestID);
                        }
                        default: {
                            throw new exceptions_1.GenericServerException(status, data.message, requestID);
                        }
                    }
                }
                throw error;
            }
        });
    }
    emitWarning(warning) {
        if (typeof process.emitWarning !== 'function') {
            //  tslint:disable:no-console
            return console.warn(`WorkOS: ${warning}`);
        }
        return process.emitWarning(warning, 'WorkOS');
    }
}
exports.WorkOS = WorkOS;
